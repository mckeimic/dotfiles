" =============================================================================
"                               General settings
" =============================================================================
set nocompatible        " iMproved.

set autoindent          " Copy indent from current line on starting a new line.
"set smartindent         " And be smart about it
set smarttab
set backspace=indent,eol,start " Backspacing over everything in insert mode.
set hidden              " Allow for putting dirty buffers in background.
set history=1024        " Lines of command history
set ignorecase          " Case-insensitive search
set smartcase           " Override ignorecase when searching uppercase.
set incsearch           " Jumps to search word as you type.
set modeline            " Enables modelines.
set wildmode=longest,list:full " How to complete <Tab> matches.
"set tildeop            " Makes ~ an operator.
set virtualedit=block   " Support moving in empty space in block mode.
set mouse=a             " Enables mouse usage (all modes)
set magic               " Improves default search
set autoread            " Prompt to reread a file if it changes
set wrap                " Wraps long lines
set scrolloff=5         " Always shows five lines of vertical context around the cursor
set colorcolumn=80      " Set to highlight text after 80 characters
set nospell               " Turn off spellchecking

" Low priority for these files in tab-completion.
set suffixes+=.aux,.bbl,.blg,.dvi,.log,.pdf,.fdb_latexmk
set suffixes+=.info,.out,.o,.lo,.bak,~,.swp,.o,.info,.log

set viminfo='20,\"500

scriptencoding utf-8

" Destroy Trailing Whitespace before saving files
autocmd BufWritePre * :%s/\s\+$//e

" Open file at the same place as the last time it was open
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif

" =============================================================================
"                                   Styling
" =============================================================================
set background=dark     " Syntax highlighting for a dark terminal background.
set hlsearch            " Highlight search results.
set ruler               " Show the cursor position all the time.
set showbreak=â†ª         " Highlight non-wrapped lines.
set showcmd             " Display incomplete command in bottom right corner.
set showmatch           " Show matching brackets
set number              " Display line numbers
set cursorline

set t_Co=256            " We use 256 color terminal emulators these days.

" Folding
"if version >= 600
    "set foldenable
    "set foldmethod=indent
"endif

" Show trailing whitepace and spaces before a tab:
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$\| \+\ze\t/
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red

" =============================================================================
"                                  Formatting
" =============================================================================
set formatoptions=tcrqn " See :h 'fo-table for a detailed explanation.
set nojoinspaces        " Don't insert two spaces when joining after [.?!].
set copyindent          " Copy the structure of existing indentation
set expandtab           " Expand tabs to spaces.
set tabstop=4           " number of spaces for a <Tab>.
set shiftwidth=4        " Tab indention
"set textwidth=79        " Text width

" Indentation Tweaks.
" e-s = do not indent if opening bracket is not first character in a line.
" g0  = do not indent C++ scope declarations.
" t0  = do not indent a function's return type declaration.
" (0  = line up with next non-white character after unclosed parentheses...
" W4  = ...but not if the last character in the line is an open parenthesis.
set cinoptions=e-s,g0,t0,(0,W4

" =============================================================================
"                               Custom Functions
" =============================================================================
" Quickly close HTML tags
imap ,/ </<C-X><C-O><Esc>%i

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %

" =============================================================================
"                                 Key Bindings
" =============================================================================

let mapleader=","

:command! NT NERDTreeToggle

map! jk <Esc>
map gr gT
map j gj
map k gk

map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Clear last search highlighting
nnoremap <CR> :noh<CR><CR>
nnoremap <space> :noh<CR><CR>

" Toggle list mode (display unprintable characters).
nnoremap <F11> :set list!<CR>

" Map F5 to destroy trailing whitepace
nnoremap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" Map jj and kk to escape
inoremap jj <Esc>
inoremap kk <Esc>

" Map Gundo to F5
nnoremap <F5> :GundoToggle<CR>

" Map Ctrl+P to well.... ctrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

" Make sure ctrl+p actually finds all the files
let g:ctrlp_max_files=0

" Cscope Stuff
"
nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-_>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>

" Using 'CTRL-spacebar' then a search type makes the vim window
" split horizontally, with search result displayed in
" the new window.

nmap <C-Space>s :scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-Space>g :scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-Space>c :scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-Space>t :scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-Space>e :scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-Space>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-Space>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-Space>d :scs find d <C-R>=expand("<cword>")<CR><CR>

" Hitting CTRL-space *twice* before the search type does a vertical
" split instead of a horizontal one

nmap <C-Space><C-Space>s
            \:vert scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-Space><C-Space>g
            \:vert scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-Space><C-Space>c
            \:vert scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-Space><C-Space>t
            \:vert scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-Space><C-Space>e
            \:vert scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-Space><C-Space>i
            \:vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-Space><C-Space>d
            \:vert scs find d <C-R>=expand("<cword>")<CR><CR>


if has("cscope")
    set cscopequickfix=s-,c-,d-,i-,t-,e-
    set csto=0
    set cst
    set nocsverb
    " add any database in current directory
    if filereadable("cscope.out")
        cs add cscope.out
        " else add database pointed to by environment
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
    set csverb
endif


" =============================================================================
"                                    Vundle
" =============================================================================

filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'

Plugin 'Lokaltog/vim-easymotion'
Plugin 'Yggdroot/indentLine'
Plugin 'altercation/vim-colors-solarized'
Plugin 'ervandew/supertab'
Plugin 'godlygeek/tabular'
Plugin 'kien/ctrlp.vim'
"Plugin 'klen/python-mode'
Plugin 'nvie/vim-flake8'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-git'
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-sensible'
Plugin 'vim-ruby/vim-ruby'
Plugin 'vim-scripts/AutoComplPop'
Plugin 'mileszs/ack.vim'

if executable('ag')
    let g:ackprg = 'ag --vimgrep'
endif

" Plugin 'vim-scripts/Gundo'

Plugin 'bling/vim-airline'
let g:airline_powerline_fonts = 1

Plugin 'bling/vim-bufferline'

" Ansible stuff
Plugin 'chase/vim-ansible-yaml'

" Ctags Plugin
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-easytags'

" Grammar Checker
" Plugin 'DamienCassou/textlint'
" LESS (bascially CSS) highlighting, indentation, and autocompletion
" Plugin 'groenewege/vim-less'
" Plugin 'vim-scripts/LanguageTool'
" let g:languagetool_jar='/usr/local/Cellar/languagetool/2.8/libexec/languagetool-commandline.jar'

" JSON highlighting and indentation
" lugin 'jakar/vim-json'

" Ends structures (like if in ruby)
" Plugin 'tpope/vim-endwise'

" runtime for Haml, Sass, and SCSS
" Plugin 'tpope/vim-haml'

" Snippet Stuff
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="vertical"

"Plugin 'LaTeX-Suite-aka-Vim-LaTeX'
"Plugin 'kchmck/vim-coffee-script'
"Plugin 'vim-scripts/jcommenter'

" Plugin 'Lokaltog/vim-powerline'
"let g:Powerline_symbols = 'fancy'
"let g:Powerline_colorscheme = 'solarized256'
set laststatus=2

let g:EasyMotion_leader_key = '<Leader>'

" Solarized
let g:solarized_menu = 0
let g:solarized_termtrans = 1
let g:solarized_contrast = 'high'
let g:solarized_hitrail = 1
if !has('gui_running')
  let g:solarized_termcolors = 256
end

" LaTeX Suite: Prevents Vim 7 from setting filetype to 'plaintex'.
let g:tex_flavor = 'latex'
let g:tex_conceal = "" " *grumbling*... http://tex.stackexchange.com/questions/96741/vim-latex-suite-unwanted-in-editor-math-symbol-conversion

"set gepprg=grep\ -nH\ $* " ? what is this?

" Needs to be executed after Vundle.
call vundle#end()
filetype plugin indent on
" filetype indent on


" Supertab Things
let g:SuperTabCrMapping = 0
let g:SuperTabDefaultCompletionType = "<c-n>"

" =============================================================================
"                                Filetype Stuff
" =============================================================================

if &t_Co > 2 || has('gui_running')
  syntax on
endif

"au BufNewFile,BufRead *.adoc set filetype=adoc
"au BufNewFile,BufRead *.adoc set makeprg=asciidoctor\ %
"au BufNewFile,BufRead *.tex set makeprg=pdflatex\ %
"au Filetype adoc                    set makeprg=asciidoctor\ %

if has("spell")
  autocmd BufRead,BufNewFile *.dox  set spell
  autocmd Filetype mail             set spell
  autocmd Filetype tex              set spell
  autocmd Filetype adoc             set spell
endif

" vim: set fenc=utf-8 sw=2 sts=2 foldmethod=marker :
autocmd FileType make setlocal noexpandtab
au FileType ruby setl sw=2 sts=2 et

"
" Auto completing Stuff
"
set omnifunc=syntaxcomplete#Complete
" Make enter select the highlighted item
inoremap <expr> <C-CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Keep selecting nearest item in list as completion options are narrowed
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
  \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

inoremap <expr> <C-Space> pumvisible() \|\| &omnifunc == '' ?pumvisible() ? "\" : "\\

" Map <leader>a to run asciidoctor on the current file
autocmd BufEnter *.adoc noremap <leader>a <Esc>:!asciidoctor %<CR>

colorscheme solarized
Plugin 'rking/ag.vim'
